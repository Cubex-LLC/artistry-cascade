import { Component } from 'cascade';
import { ITemplate } from './ITemplate';
export type SearchSize = 'default' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large';
export interface ISearchProps {
    id?: string;
    className?: string;
    value?: string;
    buttonText?: any;
    options?: string[];
    altActionText?: string;
    showOptions?: boolean;
    fill?: boolean;
    disabled?: boolean;
    disabledButton?: boolean;
    disabledInput?: boolean;
    screenSize?: SearchSize;
    showClear?: boolean;
    clearText?: any;
    onChange?: (event: Event) => any;
    onSelectOption?: (event: KeyboardEvent | MouseEvent, value: string) => any;
    onSearch?: (event: KeyboardEvent | MouseEvent, value: string) => any;
    onClear?: (event: MouseEvent) => any;
    onClose?: (event: KeyboardEvent) => any;
    altAction?: (option: string) => any;
    type?: 'button' | 'submit' | 'reset';
    theme?: 'default' | 'primary' | 'danger';
    displaySize?: 'default' | 'small' | 'large';
    display?: 'default' | 'textonly' | 'outline';
    tooltip?: string;
    tooltipDirection?: 'top' | 'right' | 'bottom' | 'left';
    tooltipOpen?: boolean;
    popover?: ITemplate;
    popoverDirection?: 'top' | 'right' | 'bottom' | 'left';
    popoverAlign?: 'top' | 'right' | 'bottom' | 'left' | 'center';
    popoverMenu?: boolean;
    popoverOpen?: boolean;
    popoverFill?: boolean;
    lockContent?: any;
    locked?: boolean;
    down?: boolean;
    link?: boolean;
    noTrigger?: boolean;
    noWrap?: boolean;
    noFocus?: boolean;
    onPopoverClose?: (event: Event) => boolean | void;
}
export default class Search extends Component<ISearchProps> {
    private closeHandle;
    activeOption: number;
    value: string;
    options: string[];
    constructor(props?: ISearchProps, children?: any[]);
    cleanOptions(options: string[], value: string): string[];
    onKeyDown: (event: KeyboardEvent) => void;
    oninput: (event: Event) => void;
    onSearch: (event: KeyboardEvent | MouseEvent) => void;
    onSelectOption(option: string, index: number, event: KeyboardEvent | MouseEvent): void;
    onClear: (event: MouseEvent) => void;
    onClose(event: KeyboardEvent): void;
    afterProps(updating: boolean): void;
    afterDispose(): void;
    render(): JSX.Element;
}
